//Below is the code with updated styling


import React, { useState } from 'react';
import { SafeAreaView, ScrollView, StyleSheet, Text, TextInput, TouchableOpacity, View } from 'react-native';

import BouncyCheckbox from "react-native-bouncy-checkbox";

// Form validation
import { Formik } from 'formik';
import * as Yup from 'yup';
// YOUTUBE:
const PasswordSchema = Yup.object().shape({
  passwordLength: Yup.number()
    .min(4, 'Should be min of 4 characters')
    .max(16, 'Should be max of 16 characters')
    .required('Length is required')

})
export default function Index() {

  const [password, setPassword] = useState('')
  const [isPassGenerated, setIsPassGenerated] = useState(false)

  const [lowerCase, setLowerCase] = useState(true)
  const [upperCase, setupperCase] = useState(false)
  const [numbers, setNumbers] = useState(false)
  const [symbols, setSymbols] = useState(false)

  const generatePasswordString = (passwordLength: number) => {
    let characterList = '';

    const upperCaseChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    const lowerCaseChars = 'abcdefghijklmnopqrstuvwxyz';
    const digitChars = '0123456789';
    const specialChars = '!@#$%^&*()_+';

    if (upperCase) {
      characterList += upperCaseChars
    }
    if (lowerCase) {
      characterList += lowerCaseChars
    }
    if (numbers) {
      characterList += digitChars
    }
    if (symbols) {
      characterList += specialChars
    }

    const passwordResult = createPassword(characterList, passwordLength)

    setPassword(passwordResult)
    setIsPassGenerated(true)

  }

  const createPassword = (characters: string, passwordLength: number) => {
    //     characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789" (62 chars)

    // passwordLength = 10 â†’ so loop runs 10 times

    // result = "" initially

    //so here basically characterIndex tries to fetch the random character index which is present in generated by Math.round(Math.random() * characters.length)
    let result = ''
    for (let i = 0; i < passwordLength; i++) {
      const characterIndex = Math.round(Math.random() * characters.length)
      result += characters.charAt(characterIndex)
    }
    return result

  }

  const resetPasswordState = () => {
    setPassword('')
    setIsPassGenerated(false)
    setLowerCase(true)
    setupperCase(false)
    setNumbers(false)
    setSymbols(false)


  }

  return (
    <ScrollView keyboardShouldPersistTaps="handled">
      <SafeAreaView style={styles.appContainer}>
        <View style={styles.formContainer}>
          <Text style={styles.title}>Password Generator</Text>
          <Formik
            initialValues={{ passwordLength: '' }}
            validationSchema={PasswordSchema}
            onSubmit={values => {
              console.log(values);
              generatePasswordString(+values.passwordLength)
            }}
          >
            {({
              values,
              errors,
              touched,
              isValid,
              handleChange,
              handleSubmit,
              handleReset,
              /* and other goodies */
            }) => (
              <>
                <View style={styles.inputWrapper}>
                  <View style={styles.inputColumn}>
                    <Text style={styles.heading}>Password Length</Text>
                    {touched.passwordLength && errors.passwordLength && (
                      <Text style={styles.errorText}>
                        {errors.passwordLength}
                      </Text>
                    )}

                  </View>
                  <TextInput
                    style={styles.inputStyle}
                    value={values.passwordLength}
                    onChangeText={handleChange('passwordLength')}
                    placeholder="Ex. 8"
                    keyboardType='numeric'
                  />
                </View>
                <View style={styles.inputWrapper}>
                  <Text style={styles.heading}>Include lowercase</Text>
                  <BouncyCheckbox
                    useBuiltInState={false}
                    isChecked={lowerCase}
                    onPress={() => setLowerCase(!lowerCase)}
                    fillColor="#29AB87"
                  />
                </View>
                <View style={styles.inputWrapper}>
                  <Text style={styles.heading}>Include Uppercase letters</Text>
                  <BouncyCheckbox
                    useBuiltInState={false}
                    isChecked={upperCase}
                    onPress={() => setupperCase(!upperCase)}
                    fillColor="#FED85D"
                  />
                </View>
                <View style={styles.inputWrapper}>
                  <Text style={styles.heading}>Include Numbers</Text>
                  <BouncyCheckbox
                    useBuiltInState={false}
                    isChecked={numbers}
                    onPress={() => setNumbers(!numbers)}
                    fillColor="#C9A0DC"
                  />
                </View>
                <View style={styles.inputWrapper}>
                  <Text style={styles.heading}>Include Symbols</Text>
                  <BouncyCheckbox
                    useBuiltInState={false}
                    isChecked={symbols}
                    onPress={() => setSymbols(!symbols)}
                    fillColor="#FC80A5"
                  />
                </View>
                <View style={styles.formActions}>
                  <TouchableOpacity
                    disabled={!isValid}
                    style={styles.primaryBtn}
                    onPress={() => handleSubmit()}
                  >
                    <Text style={styles.primaryBtnTxt}>Generate Password</Text>
                  </TouchableOpacity>
                  <TouchableOpacity
                    style={styles.secondaryBtn}
                    onPress={() => {
                      handleReset();
                      resetPasswordState()
                    }}
                  >
                    <Text style={styles.secondaryBtnTxt}>Reset</Text>
                  </TouchableOpacity>
                </View>
              </>
            )}
          </Formik>
        </View>
        {isPassGenerated ? (
          <View style={[styles.card, styles.cardElevated]}>
            <Text style={styles.subTitle}>Result:</Text>
            <Text style={styles.description}>Long Press to copy</Text>
            <Text selectable={true} style={styles.generatedPassword}>{password}</Text>
          </View>
        ) : null}
      </SafeAreaView>
    </ScrollView>
  )
}

// const styles = StyleSheet.create({
//   appContainer: {
//     flex: 1,
//   },
//   formContainer: {
//     margin: 8,
//     padding: 8,
//   },
//   title: {
//     fontSize: 32,
//     fontWeight: '600',
//     marginBottom: 15,
//   },
//   subTitle: {
//     fontSize: 26,
//     fontWeight: '600',
//     marginBottom: 2,
//   },
//   description: {
//     color: '#758283',
//     marginBottom: 8,
//   },
//   heading: {
//     fontSize: 15,
//   },
//   inputWrapper: {
//     marginBottom: 15,
//     alignItems: 'center',
//     justifyContent: 'space-between',
//     flexDirection: 'row',

//   },
//   inputColumn: {
//     flexDirection: 'column',
//   },
//   inputStyle: {
//     padding: 8,
//     width: '30%',
//     borderWidth: 1,
//     borderRadius: 4,
//     borderColor: '#16213e',
//   },
//   errorText: {
//     fontSize: 12,
//     color: '#ff0d10',
//   },
//   formActions: {
//     flexDirection: 'row',
//     justifyContent: 'center',
//   },
//   primaryBtn: {
//     width: 120,
//     padding: 10,
//     borderRadius: 8,
//     marginHorizontal: 8,
//     backgroundColor: '#5DA3FA',
//   },
//   primaryBtnTxt: {
//     color: '#fff',
//     textAlign: 'center',
//     fontWeight: '700',
//   },
//   secondaryBtn: {
//     width: 120,
//     padding: 10,
//     borderRadius: 8,
//     marginHorizontal: 8,
//     backgroundColor: '#CAD5E2',
//   },
//   secondaryBtnTxt: {
//     textAlign: 'center',
//   },
//   card: {
//     padding: 12,
//     borderRadius: 6,
//     marginHorizontal: 12,
//   },
//   cardElevated: {
//     backgroundColor: '#ffffff',
//     elevation: 1,
//     shadowOffset: {
//       width: 1,
//       height: 1,
//     },
//     shadowColor: '#333',
//     shadowOpacity: 0.2,
//     shadowRadius: 2,
//   },
//   generatedPassword: {
//     fontSize: 22,
//     textAlign: 'center',
//     marginBottom: 12,
//     color:'#000'
//   },
// });

const styles = StyleSheet.create({
  appContainer: {
    flex: 1,
    backgroundColor: '#f0f4f7', // light background
  },
  formContainer: {
    margin: 16,
    padding: 16,
    backgroundColor: '#ffffff',
    borderRadius: 12,
    elevation: 3,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowRadius: 6,
    shadowOffset: { width: 0, height: 2 },
  },
  title: {
    fontSize: 28,
    fontWeight: '700',
    marginBottom: 20,
    color: '#16213e',
    textAlign: 'center',
  },
  subTitle: {
    fontSize: 22,
    fontWeight: '600',
    marginBottom: 6,
    color: '#16213e',
  },
  description: {
    color: '#758283',
    marginBottom: 12,
    fontSize: 14,
  },
  heading: {
    fontSize: 16,
    fontWeight: '500',
    color: '#16213e',
    
  },
  inputWrapper: {
    marginBottom: 16,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    width: '100%',
    gap: 50,
  },
  inputColumn: {
    flexDirection: 'column',
    flex: 1,
  },
  inputStyle: {
    padding: 12,
    width: '40%',
    borderWidth: 1,
    borderRadius: 8,
    borderColor: '#d0d7de',
    backgroundColor: '#f7f9fa',
    fontSize: 16,
  },
  errorText: {
    fontSize: 12,
    color: '#ff4d4d',
    marginTop: 4,
  },
  formActions: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginTop: 12,
  },
  primaryBtn: {
    flex: 1,
    padding: 14,
    borderRadius: 10,
    marginHorizontal: 8,
    backgroundColor: '#5DA3FA',
  },
  primaryBtnTxt: {
    color: '#fff',
    textAlign: 'center',
    fontWeight: '700',
    fontSize: 16,
  },
  secondaryBtn: {
    flex: 1,
    padding: 14,
    borderRadius: 10,
    marginHorizontal: 8,
    backgroundColor: '#CAD5E2',
  },
  secondaryBtnTxt: {
    textAlign: 'center',
    fontWeight: '600',
    fontSize: 16,
    color: '#16213e',
  },
  card: {
    padding: 16,
    borderRadius: 12,
    marginHorizontal: 16,
    marginTop: 16,
    backgroundColor: '#ffffff',
    elevation: 2,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowRadius: 6,
    shadowOffset: { width: 0, height: 2 },
  },
  cardElevated: {
    alignItems: 'center',
  },
  generatedPassword: {
    fontSize: 20,
    textAlign: 'center',
    marginVertical: 12,
    fontWeight: '600',
    color: '#16213e',
  },
});
